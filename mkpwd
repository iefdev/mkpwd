#!/usr/bin/env python3
# vim: set ft=python syntax=python ts=4 sts=4 sw=4 et ai enc=utf-8 fenc=utf-8
'''
/usr/local/bin/mkpwd

Description:    A simple password generator written in python,
                to create strong random passwords.
Version:        v0.99-20230818
Source:         https://gitlab.com/iefdev/mkpwd
Copyright:      2023, Eric F <eric@iefdev.se>
License:        GPLv3
'''

from os.path import basename
from random import shuffle
from string import ascii_lowercase, ascii_uppercase, digits, punctuation
import sys

USAGE = '''Usage:
    mkpwd [ -hq ] [ size ] [ nr of pwds ]
    mkpwd           Enter a number at the prompt
    mkpwd 24        24 character pwd
    mkpwd 36 10     10x 36 character pwd

Options:
    -h              Display this help.
    -q              Quiet mode (only the pwd(s) in output).
                    Useful for scripting.
'''

# --- Settings & text strings ---------------- #

# Set min/max length: 12/72 (use sane defaults).
# [ref]: Bcrypt has a max length of 72.
MIN_LENGTH = 12
MAX_LENGTH = 72
DEFAULT_LENGTH = 18

# Text strings
MSG_INPUT = f'Password length [default: {DEFAULT_LENGTH}]: '
MSG_TOO_SHORT = f'The entered value is too short (<{MIN_LENGTH}).'
MSG_TOO_LONG = f'The entered value is too long (>{MAX_LENGTH}).'

# --- [end] Settings & text strings ---------  #

# Display help/usage with "-h", and exit
if len(sys.argv) >= 2 and sys.argv[1] == '-h':
    sys.exit(USAGE)

# Don't print PROGRAM in quiet mode (-q")
if len(sys.argv) >= 2 and sys.argv[1] == '-q':
    QUIET = True
    PROGRAM = None
    sys.argv.pop(1)
else:
    QUIET = None

# Red colons when too short/long
PREFIX = '::'
ERR_PREFIX = f'\x1b[1;31m{PREFIX}\x1b[0m'

# Password length: Take from argv, or ask for password length
U_INPUT = int(sys.argv[1]) if len(sys.argv) >= 2 else input(f'{PREFIX} {MSG_INPUT}')

while True:
    try:
        PWD_LENGTH = int(U_INPUT)
        if PWD_LENGTH < int(MIN_LENGTH):
            print(f'{ERR_PREFIX} {MSG_TOO_SHORT}')
            U_INPUT = input(f'{PREFIX} {MSG_INPUT}')
        elif PWD_LENGTH > int(MAX_LENGTH):
            print(f'{ERR_PREFIX} {MSG_TOO_LONG}')
            U_INPUT = input(f'{PREFIX} {MSG_INPUT}')
        else:
            break
    except ValueError:
        # Use the default...
        U_INPUT = int(DEFAULT_LENGTH)

# Character lists
# All strings combined will give the maximum length of 52, and then you get:
# "IndexError: list index out of range". So we must double the size (104)
# to get to MAX_LENGTH (72).
L_CASE = list(ascii_lowercase * 2)
U_CASE = list(ascii_uppercase * 2)
DIGITS = list(digits * 2)
PUNCTS = list(punctuation * 2)

# Number of password(s)
NUMBER_OF_PWDS = int(sys.argv[2]) if len(sys.argv) >= 3 else 1

# Output
for n in range(NUMBER_OF_PWDS):
    shuffle(L_CASE)
    shuffle(U_CASE)
    shuffle(DIGITS)
    shuffle(PUNCTS)

    # Ratio: 60/40 between ascii_* and digits/punctuation
    LETTERS_RATIO = round(PWD_LENGTH * (30/100))
    NON_LETTERS_RATIO = round(PWD_LENGTH * (20/100))

    result = []

    for x in range(LETTERS_RATIO):
        result.append(L_CASE[x])
        result.append(U_CASE[x])

    for x in range(NON_LETTERS_RATIO):
        result.append(DIGITS[x])
        result.append(PUNCTS[x])

    PWD_NR = f' #{n + 1}' if NUMBER_OF_PWDS > 1 else ''

    shuffle(result)

    PROGRAM = f'{basename(sys.argv[0])}{PWD_NR}:\t' if QUIET is None else ''

    OUTPUT = ''.join(result)
    print(f'{PROGRAM}{OUTPUT}'.expandtabs(4))

sys.exit()
